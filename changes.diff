diff --git a/files/mcloud/node_modules/@appium/base-driver/build/lib/basedriver/mcloud-utils.js b/files/mcloud/node_modules/@appium/base-driver/build/lib/basedriver/mcloud-utils.js
index 391d6cd..9a8014e 100644
--- a/files/mcloud/node_modules/@appium/base-driver/build/lib/basedriver/mcloud-utils.js
+++ b/files/mcloud/node_modules/@appium/base-driver/build/lib/basedriver/mcloud-utils.js
@@ -30,8 +30,15 @@ async function getSharedFolderForAppUrl(url) {
     }
     logger_1.default.info(`[MCLOUD] Target path [getSharedFolderForAppUrl]: ${targetPath}`);
     const folderExists = await support_1.fs.exists(targetPath);
-    if (!folderExists)
-        await support_1.fs.mkdir(targetPath, { recursive: true });
+    if (!folderExists){
+        try {
+            await support_1.fs.mkdir(targetPath, { recursive: true });
+            console.log(`The directory ${targetPath} was created successfully.`);
+        } catch (error) {
+            console.error(`Error creating directory ${targetPath}: ${error.message}`);
+            throw new Error(error)
+        }
+    }    
     return targetPath;
 }
 exports.getSharedFolderForAppUrl = getSharedFolderForAppUrl;
diff --git a/files/mcloud/node_modules/@appium/base-driver/build/lib/protocol/protocol.js b/files/mcloud/node_modules/@appium/base-driver/build/lib/protocol/protocol.js
index 7e979d6..ac5297c 100644
--- a/files/mcloud/node_modules/@appium/base-driver/build/lib/protocol/protocol.js
+++ b/files/mcloud/node_modules/@appium/base-driver/build/lib/protocol/protocol.js
@@ -392,10 +392,20 @@ function buildHandler(app, method, path, spec, driver, isSessCmd) {
                 })}`);
         }
         catch (err) {
+
             // PATCH #2 <appium>/node_modules/appium/node_modules/appium-base-driver/build/lib/protocol/protocol.js to return to carina "DEBUG info" about problematic step
-            err.message = `${err.message}[[[--udid ${process.env.DEVICE_UDID} --name ${process.env.DEVICE_NAME} --sessionId ${process.env.sessionId}]]]`;
+            if(err.message !== 'An element could not be located on the page using the given search parameters.'){
+                err.message = `${err.message}[[[--udid ${process.env.DEVICE_UDID} --name ${process.env.DEVICE_NAME} --sessionId ${process.env.sessionId}]]]`;
+            }
+            
+            // handling error with ENOSPC: no space left on device, mkdir '/tmp/ and exit with code 0
+            if(err.message.toLowerCase().includes('no space left on device') || err.message.toLowerCase().includes('adb: failed to install')){
+                console.log(`- [BaseDriver] ENOSPC error, no space left on device, Error message:${err.message} appium exit with code 0`)
+                process.exit(0);
+            }
             // if anything goes wrong, figure out what our response should be
             // based on the type of error that we encountered
+            
             let actualErr;
             if (err instanceof Error || (lodash_1.default.has(err, 'stack') && lodash_1.default.has(err, 'message'))) {
                 actualErr = err;
diff --git a/files/mcloud/node_modules/appium-2_2_2.diff b/files/mcloud/node_modules/appium-2_2_2.diff
index 46441d6..39eab30 100644
--- a/files/mcloud/node_modules/appium-2_2_2.diff
+++ b/files/mcloud/node_modules/appium-2_2_2.diff
@@ -365,9 +365,22 @@ index 000000000..b045d4c0f
 +
 +    logger.info(`[MCLOUD] Target path [getSharedFolderForAppUrl]: ${targetPath}`)
 +    const folderExists = await fs.exists(targetPath);
-+    if(!folderExists)
-+        await fs.mkdir(targetPath, {recursive : true});
-+  
++    logger.info(`[MCLOUD] Target path [getSharedFolderForAppUrl]: ${targetPath}`)
++    const folderExists = await fs.exists(targetPath);
+-+    if(!folderExists)
+-+        await fs.mkdir(targetPath, {recursive : true});
+-+  
++-    if(!folderExists)
++-        await fs.mkdir(targetPath, {recursive : true});
+++    if (!folderExists){
+++        try {
+++            await support_1.fs.mkdir(targetPath, { recursive: true });
+++            console.log(`The directory ${targetPath} was created successfully.`);
+++        } catch (error) {
+++            console.error(`Error creating directory ${targetPath}: ${error.message}`);
+++            throw new Error(error)
+++        }
+++    }
 +    return targetPath;
 +}
 +
@@ -480,11 +493,19 @@ index 7eca78cd9..4f8034cad 100644
        );
      } catch (err) {
 +      // PATCH #2 <appium>/node_modules/appium/node_modules/appium-base-driver/build/lib/protocol/protocol.js to return to carina "DEBUG info" about problematic step
-+      err.message = `${err.message}[[[--udid ${process.env.DEVICE_UDID} --name ${process.env.DEVICE_NAME} --sessionId ${process.env.sessionId}]]]`;
-+
-       // if anything goes wrong, figure out what our response should be
-       // based on the type of error that we encountered
-       let actualErr;
+-            err.message = `${err.message}[[[--udid ${process.env.DEVICE_UDID} --name ${process.env.DEVICE_NAME} --sessionId ${process.env.sessionId}]]]`;
++            if(!err.message == 'An element could not be located on the page using the given search parameters.'){
++                err.message = `${err.message}[[[--udid ${process.env.DEVICE_UDID} --name ${process.env.DEVICE_NAME} --sessionId ${process.env.sessionId}]]]`;
++            }
++            
++            // handling error with ENOSPC: no space left on device, mkdir '/tmp/ and exit with code 1 
++            if(err.message.includes('no space left on device') || err.message.includes('adb: failed to install')){
++                console.log(`ENOSPC error, no space left on device, Error message:${err.message} appium exit with code 1`)
++                process.exit(1);
++            }
+             // if anything goes wrong, figure out what our response should be
+             // based on the type of error that we encountered
+             let actualErr;
 diff --git a/packages/base-driver/lib/protocol/routes.js b/packages/base-driver/lib/protocol/routes.js
 index 23eacf31c..b810855b6 100644
 --- a/packages/base-driver/lib/protocol/routes.js
